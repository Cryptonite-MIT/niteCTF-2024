from sage.all import *
import math
import Crypto.Util.number as  cn

r =17089720847522532186100904495372954796086523439343401190123572243129905753474678094845069878902485935983903151003792259885100719816542256646921114782358850654669422154056281086124314106159053995410679203972646861293990837092569959353563829625357193304859110289832087486433404114502776367901058316568043039359702726129176232071380909102959487599545443427656477659826199871583221432635475944633756787715120625352578949312795012083097635951710463898749012187679742033
ct =583923134770560329725969597854974954817875793223201855918544947864454662723867635785399659016709076642873878052382188776671557362982072671970362761186980877612369359390225243415378728776179883524295537607691571827283702387054497203051018081864728864347679606523298343320899830775463739426749812898275755128789910670953110189932506526059469355433776101712047677552367319451519452937737920833262802366767252338882535122186363375773646527797807010023406069837153015954208184298026280412545487298238972141277859462877659870292921806358086551087265080944696281740241711972141761164084554737925380675988550525333416462830465453346649622004827486255797343201397171878952840759670675361040051881542149839523371605515944524102331865520667005772313885253113470374005334182380501000
# WRITEUP :

# r = ((17*A*A*A) - (15*B*B*B) - (45*A*A*B) + (51*A*B*B)) // 8          ------- eqn 1
# to find : p, q  or   a, b

# A = a + b
# B = a - b
# put values of A B in equation 1

# equation 1 simplifies to 
# r = a**3 + 16b**3

# Mod r both sides

# 0 = a**3 + 16b**3 (mod r)
# a**3 = -16b**3    (mod r)

# Cube root both sides
# let x = cube root(-16) in ring r

# a = x b           (mod r)
# a = xb - kr

# we can construct vectors such that : 
# b[x, 1] - k[r, 0] = [bx - kr, b]
# b[x, 1] - k[r, 0] = [ a, b ]

# therefore, reduce the lattice with basis [x, 1], [r, 0] -> get [a, b] i.e.  p, q
# now u got the primes for n, (p, q, r) rsa decode the rest

 
x = int(GF(r)(-16).nth_root(3))
M = Matrix([[x,1],[r,0]])           # constructed the basis
a, b = M.LLL()[0]                   # reduced the basis with LLL
print(f"p = {a}")
print(f"q = {b}")

p = int(a)                          # got them primes hehe
q = int(b)

n = p*q*r                           # got it from here
e = 65537
phi = (p-1) * (q-1) * (r-1)
d = cn.inverse(e, phi)
print(cn.long_to_bytes(pow(ct, d, n)).decode())   # nite{7h3_Latt1c3_kn0ws_Ur_Pr1m3s_very_vvery_v3Ry_w3LLL}
